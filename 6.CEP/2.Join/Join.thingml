datatype Integer	
@java_type "int";

datatype Boolean
@java_type "boolean";
 
/**
You can see that this thing is Platform-Independent: we are not using any C, Java or JavaScript code here.
/!\ However, do not expect it to compile in C, yet, as CEP is currenlty only available for Java and JavaScript at the moment
*/
thing JoinCEP {

    //These are basic ThingML messages that you have manipulated before
    message m1();
    message m1b();
    message m2(v1 : Integer, v2 : Integer);
    message m3(v1 : Integer);
    
    //These are CEP message that will be produced by CEP queries
    //Good news: they are just basic ThingML messages that you receive and send as usual
    message cep1();
    message cep2(v1 : Integer, v2 : Integer);
    
    provided port sendPort {
        sends m1, m1b, m2, m3, cep1, cep2   
    }
    
    required port receivePort {
        receives m1, m1b, m2, m3, cep1, cep2    
    }
    
    /*Streams are defined at the same level as ports, so that we can reuse 
    the same stream in different places in the implementation (state machine)*/
    
    //This is a very simple CEP join that joins two message and forwards a message
    //Note: the @TTL annotation makes it possible to tweak the time defining the window when 2 messages are "joinable" or "mergeable"""""
    //Default TTL is 250 ms (so we would not need the annotation if 250 ms is acceptable)
    stream simpleJoin @TTL "250" do
        from [e1 : receivePort?m1 & e2 : receivePort?m1b -> cep1()]
        action sendPort!cep1()
    end
    
    stream simpleJoinWithParams @TTL "250" do
        from [e1 : receivePort?m2 & e2 : receivePort?m3 -> cep2(e1.v1 + e2.v1, e1.v2)]
        select a : #0, b : #1
        action sendPort!cep2(a, b)
    end

	statechart HelloWorld init Greetings {
        
        //Some booleans to keep track of the CEP results we receive
        //Note: we could use proper CEP to manage that :-)
        property cep1Rec : Boolean = false
        property cep2Rec : Boolean = false
	
		state Greetings {

            on entry do
                print "Welcome!\n\n"
                
                sendPort!m1() // Those two messages should trigger cep1
                sendPort!m1b()
                
                sendPort!m2(1, 2) //This should trigger both cep2 (1+3, 2)
                sendPort!m3(3)
            end
            
            internal event receivePort?cep1
            action do
                cep1Rec = true
                print "CEP1 received!\n"
            end
            
            internal event receivePort?cep2
            action do
                cep2Rec = true
                print "CEP2 received!\n"
            end
            			
			transition -> Bye 
			guard cep1Rec and cep2Rec //exit when all CEP results have been received
			
		}
	
		state Bye {
			on entry print "\nBye.\n\n"
		}
	
	}
}
